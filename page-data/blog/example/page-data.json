{"componentChunkName":"component---src-templates-blog-post-template-js","path":"/blog/example/","webpackCompilationHash":"","result":{"data":{"markdownRemark":{"id":"0f521f81-6ec4-5e39-8486-7e367db76072","html":"<p>You wrote a few components with <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener\">Hooks</a>. Maybe even a small app. You’re mostly satisfied. You’re comfortable with the API and picked up a few tricks along the way. You even made some <a href=\"https://reactjs.org/docs/hooks-custom.html\" target=\"_blank\" rel=\"noopener\">custom Hooks</a> to extract repetitive logic (300 lines gone!) and showed it off to your colleagues. “Great job”, they said.</p>\n<p>But sometimes when you <code class=\"language-text\">useEffect</code>, the pieces don’t quite fit together. You have a nagging feeling that you’re missing something. It seems similar to class lifecycles… but is it really? You find yourself asking questions like:</p>\n<ul>\n<li>🤔 How do I replicate <code class=\"language-text\">componentDidMount</code> with <code class=\"language-text\">useEffect</code>?</li>\n<li>🤔 How do I correctly fetch data inside <code class=\"language-text\">useEffect</code>? What is <code class=\"language-text\">[]</code>?</li>\n<li>🤔 Do I need to specify functions as effect dependencies or not?</li>\n<li>🤔 Why do I sometimes get an infinite refetching loop?</li>\n<li>🤔 Why do I sometimes get an old state or prop value inside my effect?</li>\n</ul>\n<p>When I just started using Hooks, I was confused by all of those questions too. Even when writing the initial docs, I didn’t have a firm grasp on some of the subtleties. I’ve since had a few “aha” moments that I want to share with you. <strong>This deep dive will make the answers to these questions look obvious to you.</strong></p>\n<p>To <em>see</em> the answers, we need to take a step back. The goal of this article isn’t to give you a list of bullet point recipes. It’s to help you truly “grok” <code class=\"language-text\">useEffect</code>. There won’t be much to learn. In fact, we’ll spend most of our time <em>un</em>learning.</p>\n<p><strong>It’s only after I stopped looking at the <code class=\"language-text\">useEffect</code> Hook through the prism of the familiar class lifecycle methods that everything came together for me.</strong></p>\n<blockquote>\n<p>“Unlearn what you have learned.” — Yoda</p>\n</blockquote>\n<p><img src=\"./yoda.jpg\" alt=\"Yoda sniffing the air. Caption: “I smell bacon.”\"></p>\n<hr>\n<p><strong>This article assumes that you’re somewhat familiar with <a href=\"https://reactjs.org/docs/hooks-effect.html\" target=\"_blank\" rel=\"noopener\"><code class=\"language-text\">useEffect</code></a> API.</strong></p>\n<p><strong>It’s also <em>really</em> long. It’s like a mini-book. That’s just my preferred format. But I wrote a TLDR just below if you’re in a rush or don’t really care.</strong></p>\n<p><strong>If you’re not comfortable with deep dives, you might want to wait until these explanations appear elsewhere. Just like when React came out in 2013, it will take some time for people to recognize a different mental model and teach it.</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What does it mean? Does <code class=\"language-text\">count</code> somehow “watch” changes to our state and update automatically? That might be a useful first intuition when you learn React but it’s <em>not</em> an <a href=\"https://overreacted.io/react-as-a-ui-runtime/\" target=\"_blank\" rel=\"noopener\">accurate mental model</a>.</p>\n<p><strong>In this example, <code class=\"language-text\">count</code> is just a number.</strong> It’s not a magic “data binding”, a “watcher”, a “proxy”, or anything else. It’s a good old number like this one:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// ...</span></code></pre></div>","frontmatter":{"date":"March 09, 2019","title":"A Complete Guide to useEffect"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/example/"}}}