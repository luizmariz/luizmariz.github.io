{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/components/PostList/styled.js","webpack:///./src/components/PostList/PostItem/styled.js","webpack:///./src/components/PostList/PostItem/index.js","webpack:///./src/components/PostList/index.js","webpack:///./src/templates/blog-index.js","webpack:///./src/components/shared/Bio/styled.js","webpack:///./src/components/shared/Bio/index.js","webpack:///./src/assets/images/default-img.png","webpack:///./src/components/SEO/index.js"],"names":["formatTimestamp","date","readTime","Date","toLocaleDateString","locale","year","month","day","Math","ceil","Container","styled","div","article","Tags","span","Title","h2","Description","p","Time","time","PostItem","readingTime","slug","tags","title","summary","to","rel","Fragment","PostList","posts","map","node","key","fields","frontmatter","minutes","BlogIndexTemplate","data","location","Layout","SEO","image","img","Bio","allMarkdownRemark","edges","pageQuery","Text","media","greaterThan","Row","StyledImg","Img","avatar","useStaticQuery","alt","fixed","childImageSharp","style","display","module","exports","meta","description","lang","siteMetadata","site","url","siteUrl","siteDescription","siteImage","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps"],"mappings":"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","file":"component---src-templates-blog-index-js-6eca6002530e15bd380b.js","sourcesContent":["export function formatTimestamp(date, readTime) {\n  const options = { locale: 'pt-br', year: 'numeric', month: 'long', day: 'numeric' };\n  const dateString = (new Date(`${date}T00:00:00.000`).toLocaleDateString('pt-br', options));\n\n  return `${dateString} Â· Leitura de ${Math.ceil(readTime)} min`;\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin-top: 3.5rem;\n  margin-bottom: 0.9rem;\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.article`\n  width: 100%;\n  margin-top: 2rem;\n  padding: 1.7rem 2rem;\n\n  border: 1px solid rgba(var(--text), 0.2);\n  border-radius: 10px;\n  transition: border 0.1s ease-in;\n\n  svg {\n    margin-right: 0.5rem;\n    color: var(--secondary);\n  }\n\n  &:hover {\n    cursor: pointer;\n    border: 1px solid rgba(var(--text), 0.5);\n    transition: border 0.1s ease-in;\n  }\n\n  a {\n    display: block;\n  }\n`;\n\nexport const Tags = styled.span`\n  display: flex;\n  margin-bottom: 0;\n  margin-top: 1rem;\n  align-items: center;\n\n  font-size: 0.9rem;\n  color: rgb(var(--text));\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 1.5rem;\n  margin-top: 0;\n\n  color: var(--primary);\n`;\n\nexport const Description = styled.p`\n  margin-top: 0;\n  margin-bottom: 0;\n\n  color: rgba(var(--text), 0.7);\n`;\n\nexport const Time = styled.time`\n  margin-bottom: .5rem;\n  margin-top: 0;\n`;\n","import React from 'react';\nimport { formatTimestamp } from '../../../utils/helpers';\nimport { MdLabel } from 'react-icons/md';\nimport { Anchor } from '../../shared/styled';\nimport PropTypes from 'prop-types';\nimport * as S from './styled';\n\nfunction PostItem({ date, readingTime, slug, tags, title, summary }) {\n  return (\n    <S.Container>\n      <Anchor to={slug} rel=\"bookmark\">\n        <React.Fragment>\n          <header>\n            <S.Time>{formatTimestamp(date, readingTime)}</S.Time>\n            <S.Title>{title}</S.Title>\n          </header>\n          <S.Description>{summary}</S.Description>\n          <S.Tags>\n            <MdLabel />\n            {tags}\n          </S.Tags>\n        </React.Fragment>\n      </Anchor>\n    </S.Container>\n  );\n}\n\nPostItem.propTypes = {\n  date: PropTypes.string.isRequired,\n  readingTime: PropTypes.number.isRequired,\n  slug: PropTypes.string.isRequired,\n  tags: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired\n};\n\nexport default PostItem;\n","import React from 'react';\nimport * as S from './styled';\nimport PropTypes from 'prop-types';\nimport PostItem from './PostItem';\n\nfunction PostList({ posts }) {\n  return (\n    <S.Container>\n      {posts.map(({ node }) => (\n        <PostItem\n          key={node.fields.slug}\n          date={node.frontmatter.date}\n          readingTime={node.fields.readingTime.minutes}\n          slug={node.fields.slug}\n          tags={node.frontmatter.tags}\n          title={node.frontmatter.title}\n          summary={node.frontmatter.summary}\n        />\n      ))}\n    </S.Container>\n  );\n}\n\nPostList.propTypes = {\n  posts: PropTypes.array.isRequired\n};\n\nexport default PostList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport Bio from '../components/shared/Bio';\nimport SEO from '../components/SEO';\nimport PostList from '../components/PostList';\nimport img from '../assets/images/default-img.png';\n\nfunction BlogIndexTemplate({ data, location }) {\n  return (\n    <Layout location={location}>\n      <SEO image={img} />\n      <aside>\n        <Bio />\n      </aside>\n      <main>\n        <PostList posts={data.allMarkdownRemark.edges} />\n      </main>\n    </Layout>\n  );\n}\n\nexport default BlogIndexTemplate;\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n            readingTime {\n              minutes\n            }\n          }\n          frontmatter {\n            date(locale: \"pt-br\", formatString: \"YYYY-MM-DD\")\n            title\n            summary\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import styled from 'styled-components';\nimport media from 'styled-media-query';\n\nimport Img from 'gatsby-image';\n\nexport const Text = styled.p`\n  max-width: 14rem;\n  margin: 0;\n  padding: 0;\n  padding-left: 1rem;\n\n  white-space: pre-line;\n\n  a::before {\n    content: none !important;\n  }\n\n  ${media.greaterThan(\"375px\")`\n    max-width: 16rem;\n  `}\n\n  ${media.greaterThan(\"medium\")`\n    max-width: 25rem;\n  `}\n`;\n\nexport const Row = styled.div`\n  display: flex;\n`;\n\nexport const StyledImg = styled(Img)`\n  width: 55px;\n  height: 55px;\n\n  border-radius: 50%;\n`;\n","import React from 'react';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\nimport * as S from './styled';\n\nfunction Bio() {\n  const { avatar } = useStaticQuery(\n    graphql`\n      query {\n        avatar: file(relativePath: { eq: \"photo.png\" }) {\n          childImageSharp {\n            fixed(width: 55, height: 55) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n    `\n  );\n\n  return (\n    <S.Row>\n      <S.StyledImg\n        alt=\"Imagem do autor do blog\"\n        fixed={avatar.childImageSharp.fixed}\n        style={{ display: 'inherit' }}\n      />\n      <S.Text>\n        Blog por <Link to=\"/about/\">Luiz Gustavo</Link>.{'\\n'}\n        Entusiasta de coisas que funcionam.\n      </S.Text>\n    </S.Row>\n  );\n}\n\nexport default Bio;\n","module.exports = __webpack_public_path__ + \"static/default-img-e6b9d370fe6263375a1124a3d86f26e2.png\";","import React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        siteUrl\n      }\n    }\n  }\n`;\n\nfunction SEO({ meta, title, description, image, slug, lang }) {\n  const data = useStaticQuery(query);\n  const { siteMetadata } = data.site;\n  const url = `${siteMetadata.siteUrl}${slug}`;\n  const siteDescription = description || siteMetadata.description;\n  const siteImage = image ? `${siteMetadata.siteUrl}${image}` : null;\n\n  return (\n    <Helmet\n      htmlAttributes={{ lang }}\n      {...(title\n        ? {\n          titleTemplate: `%s â ${siteMetadata.title}`,\n          title\n        }\n        : {\n          title: `${siteMetadata.title} â Home`\n        })}\n      meta={[\n        {\n          name: 'description',\n          content: siteDescription\n        },\n        {\n          property: 'og:url',\n          content: url\n        },\n        {\n          property: 'og:title',\n          content: title || siteMetadata.title\n        },\n        {\n          property: 'og:description',\n          content: siteDescription\n        },\n        {\n          property: 'og:type',\n          content: 'website'\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary'\n        },\n        {\n          name: 'twitter:title',\n          content: title || siteMetadata.title\n        },\n        {\n          name: 'twitter:description',\n          content: siteDescription\n        }\n      ]\n        .concat(\n          siteImage\n            ? [\n              {\n                property: 'og:image',\n                content: siteImage\n              },\n              {\n                name: 'twitter:image',\n                content: siteImage\n              }\n            ]\n            : []\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  meta: [],\n  lang: 'pt-BR',\n  title: '',\n  slug: '',\n  image: null\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string,\n  lang: PropTypes.string\n};\n\nexport default SEO;\n"],"sourceRoot":""}